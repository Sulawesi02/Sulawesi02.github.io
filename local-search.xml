<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2024/08/19/2024-08-19-git/"/>
    <url>/2024/08/19/2024-08-19-git/</url>
    
    <content type="html"><![CDATA[<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h1><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><h1 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2.基本操作"></a>2.基本操作</h1><p>Git 常用的是以下 6 个命令：<strong>git clone</strong>、<strong>git push</strong>、<strong>git add</strong> 、<strong>git commit</strong>、<strong>git checkout</strong>、<strong>git pull</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Sulawesi02/Pictures@master/img/git-command.jpg" alt="img"></p><ul><li>workspace：工作区</li><li>staging area：暂存区&#x2F;缓存区</li><li>local repository：本地仓库&#x2F;版本库</li><li>remote repository：远程仓库</li></ul><p><strong>说明：</strong></p><ol><li>repository就是一个仓库，里面存储的就是我们的项目代码、数据和文件；</li><li>workspace就是你写代码的当前目录，你写代码、改代码都直接作用于上；</li><li>staging area就是暂存区，你觉得你这个模块写完了，应该不会变了，就可以staging一下，相反，你觉得你写的代码有问题，可以从本地分支check out一下，就类似于ctrl+z到上一次commit；</li><li>当你实现了某一个功能，你可能就需要把所有的需要提交的文件编程staging的状态，然后提交到你本地的repository里面，也就是commit；</li><li>如果你发现你污染了工作区的某一个文件，且这个文件没有被你staging，那么你可以从local repository中checkout一下；</li><li>使用push将本地仓库代码push到远程，使用pull将远程仓库的代码更新至本地。</li></ol><h3 id="2-1克隆仓库"><a href="#2-1克隆仓库" class="headerlink" title="2.1克隆仓库"></a>2.1克隆仓库</h3><p>初始化 Git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><p>克隆默认分支代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/angr/angr-doc.git<br></code></pre></td></tr></table></figure><p>克隆 master 分支代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> -b master http://gitslab.yiqing.com/declare/about.git<br></code></pre></td></tr></table></figure><p>设置提交代码时的用户信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Sulawesi02&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;18293411692@163.com&quot;</span><br></code></pre></td></tr></table></figure><blockquote><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><p>查看所有分支：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure><p>查看远程分支：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-attribute">r</span><br></code></pre></td></tr></table></figure><p>查看所有本地和远程分支：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>将其他分支合并到当前分支：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">git <span class="hljs-built_in">merge</span> [branch <span class="hljs-keyword">name</span>]<br></code></pre></td></tr></table></figure><p>例如，切换到 main 分支并合并 [branch name] 分支：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout <span class="hljs-selector-tag">main</span><br>git merge <span class="hljs-selector-attr">[branch name]</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="2-2创建新分支"><a href="#2-2创建新分支" class="headerlink" title="2.2创建新分支"></a>2.2创建新分支</h3><p>为了避免直接在 main 或 master 分支上进行开发，通常会创建并切换到一个新的分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地创建新的分支</span><br>git branch [branch name]<br><span class="hljs-comment"># 切换到新的分支</span><br>git checkout [branch name]<br><br><span class="hljs-comment"># 创建并切换到新的分支</span><br>git checkout -b [branch name]<br></code></pre></td></tr></table></figure><h3 id="2-3暂存"><a href="#2-3暂存" class="headerlink" title="2.3暂存"></a>2.3暂存</h3><p>将修改过的文件添加到暂存区，以便进行下一步的提交操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add filename<br><span class="hljs-comment"># 或者添加所有修改的文件</span><br>git add .<br></code></pre></td></tr></table></figure><h3 id="2-4提交"><a href="#2-4提交" class="headerlink" title="2.4提交"></a>2.4提交</h3><p>将暂存区的更改提交到本地仓库，并添加提交信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;first commit&quot;</span><br></code></pre></td></tr></table></figure><blockquote><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>限制显示的提交数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -n &lt;number&gt;<br></code></pre></td></tr></table></figure><p>例如，显示最近的 5 次提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -n 5<br></code></pre></td></tr></table></figure><p>显示自指定日期之后的提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --since=<span class="hljs-string">&quot;2024-01-01&quot;</span><br></code></pre></td></tr></table></figure><p>显示指定日期之前的提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --<span class="hljs-keyword">until</span>=<span class="hljs-string">&quot;2024-07-01&quot;</span><br></code></pre></td></tr></table></figure><p>只显示某个作者的提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --author=<span class="hljs-string">&quot;Author Name&quot;</span><br></code></pre></td></tr></table></figure><h3 id="恢复和回退"><a href="#恢复和回退" class="headerlink" title="恢复和回退"></a>恢复和回退</h3><p>Git 提供了多种方式来恢复和回退到之前的版本，不同的命令适用于不同的场景和需求。</p><p>以下是几种常见的方法：</p><ul><li>**<code>git checkout</code>**：切换分支或恢复文件到指定提交。</li><li>**<code>git reset</code>**：重置当前分支到指定提交（软重置、混合重置、硬重置）。</li><li>**<code>git revert</code>**：创建一个新的提交以撤销指定提交，不改变提交历史。</li><li>**<code>git reflog</code>**：查看历史操作记录，找回丢失的提交。</li></ul><h3 id="（1）git-checkout：检查出特定版本的文件"><a href="#（1）git-checkout：检查出特定版本的文件" class="headerlink" title="（1）git checkout：检查出特定版本的文件"></a>（1）git checkout：检查出特定版本的文件</h3><p>git checkout 命令用于切换分支或恢复工作目录中的文件到指定的提交。</p><p>恢复工作目录中的文件到某个提交：</p><p>将 file.txt 恢复到 76eac54 提交时的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout 76eac54 -- file.txt <span class="hljs-comment">#76eac54是当前要恢复的commit id</span><br></code></pre></td></tr></table></figure><p>切换到 76eac54 提交提交时的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout 76eac54<br></code></pre></td></tr></table></figure><p>这种方式切换到特定的提交时，处于分离头指针（detached HEAD）状态。</p><h3 id="（2）git-reset：重置当前分支到特定提交"><a href="#（2）git-reset：重置当前分支到特定提交" class="headerlink" title="（2）git reset：重置当前分支到特定提交"></a>（2）git reset：重置当前分支到特定提交</h3><p>git reset 命令可以更改当前分支的提交历史，它有三种主要模式：–soft、–mixed 和 –hard。</p><p><strong>–soft</strong>：只重置 HEAD 到 76eac54 提交，保留暂存区更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --soft 76eac54<br></code></pre></td></tr></table></figure><p><strong>–mixed（默认）</strong>：重置 HEAD 到 76eac54 提交，取消暂存区更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --mixed 76eac54<br></code></pre></td></tr></table></figure><p><strong>–hard</strong>：重置 HEAD 到 76eac54 提交，丢弃所有更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard 76eac54 <span class="hljs-comment">#76eac54是当前要恢复的commit id</span><br>git reset --hard <span class="hljs-built_in">head</span> <span class="hljs-comment">#当前版本</span><br>git reset --hard HEAD^ <span class="hljs-comment">#回退到上一个版本</span><br>git reset --hard HEAD^^ <span class="hljs-comment">#回退到上上一个版本</span><br>git reset --hard HEAD~3 <span class="hljs-comment">#回退到往上3个版本</span><br>git reset --hard HEAD~10 <span class="hljs-comment">#回退到往上10个版本</span><br></code></pre></td></tr></table></figure><h3 id="（3）git-revert：撤销某次提交"><a href="#（3）git-revert：撤销某次提交" class="headerlink" title="（3）git revert：撤销某次提交"></a>（3）git revert：撤销某次提交</h3><p>git revert 命令创建一个新的提交，用来撤销指定的提交，它不会改变提交历史，适用于已经推送到远程仓库的提交。</p><p>撤销 76eac54 提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git revert 76eac54<br></code></pre></td></tr></table></figure><h3 id="（4）git-reflog：查看历史操作记录"><a href="#（4）git-reflog：查看历史操作记录" class="headerlink" title="（4）git reflog：查看历史操作记录"></a>（4）git reflog：查看历史操作记录</h3><p>git reflog 命令记录了所有 HEAD 的移动。即使提交被删除或重置，也可以通过 reflog 找回。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reflog<br></code></pre></td></tr></table></figure><p>利用 reflog 可以找到之前的提交哈希，从而恢复到特定状态。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard HEAD@&#123;3&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="2-5推送"><a href="#2-5推送" class="headerlink" title="2.5推送"></a>2.5推送</h3><p>将本地的提交推送到远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin [branch name]<br></code></pre></td></tr></table></figure><h3 id="2-6拉取最新更改"><a href="#2-6拉取最新更改" class="headerlink" title="2.6拉取最新更改"></a>2.6拉取最新更改</h3><p>在推送本地更改之前，最好从远程仓库拉取最新的更改，以避免冲突：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin main<br><span class="hljs-comment"># 或者如果在新的分支上工作</span><br>git pull origin [branch name]<br></code></pre></td></tr></table></figure><blockquote><h2 id="为什么要先拉取？"><a href="#为什么要先拉取？" class="headerlink" title="为什么要先拉取？"></a>为什么要先拉取？</h2><p>Git要求在推送之前先拉取的原因是为了避免冲突。当多个开发人员同时修改同一个文件或代码时，可能会发生冲突。为了解决这种冲突，Git采用了合并（Merge）的方式。而在进行合并之前，我们需要先获取最新的更改。</p><p>假设有两个开发人员同时从远程仓库克隆了一个项目，并分别对同一文件进行了修改。如果其中一个开发人员直接推送自己的更改而不经过拉取过程，那么另一个开发人员在拉取最新更改后将会面临冲突。</p><p>使用示例来解释这个概念更容易理解。假设我们有两个开发人员A和B，他们共同在一个项目中工作。他们分别从远程仓库克隆了项目，并开始进行开发。</p><ol><li>A完成了对文件A的修改，并将更改推送到主线分支。</li><li>即使B将自己的更改推送到主线分支之前执行了拉取操作，B还是会得到一个合并冲突的错误提示，因为他的更改和A的更改发生冲突。</li></ol><p>通过拉取最新更改，B将能检测到并解决冲突。这样，在合并的过程中就可以保持项目的一致性和完整性。</p></blockquote><h3 id="2-7删除分支"><a href="#2-7删除分支" class="headerlink" title="2.7删除分支"></a>2.7删除分支</h3><p>如果不再需要新功能分支，可以将其删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -d [branch name]<br></code></pre></td></tr></table></figure><p>强制删除未合并的分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -D &lt;branchname&gt;<br></code></pre></td></tr></table></figure><p>或者从远程仓库删除分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin --delete [branch name]<br></code></pre></td></tr></table></figure><h1 id="3-Git-远程仓库-Github"><a href="#3-Git-远程仓库-Github" class="headerlink" title="3.Git 远程仓库(Github)"></a>3.Git 远程仓库(Github)</h1><p>本例使用了 Github 作为远程仓库</p><p>由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：</p><p>使用以下命令生成 SSH Key：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;18293411692@163.com&quot;</span><br></code></pre></td></tr></table></figure><p>接着一路回车，直到结束。 会显示已经生成了.ssh的文件夹。在你的电脑中找到文件夹C:\Users\ <code>useraccount </code>&#x2F;.ssh&#x2F;id_rsa.pub，用记事本打开，复制全部内容。</p><p>打开自己的 Github 主页，点击右上角的头像，点击Settings。</p><p><img src="https://cdn.jsdelivr.net/gh/Sulawesi02/Pictures@master/img/48840BF0-992F-4CCC-A388-15CB74819D88.jpg" alt="img"></p><p>点击SSH and GPG keys，然后点击New SSH keys。</p><p><img src="https://cdn.jsdelivr.net/gh/Sulawesi02/Pictures@master/img/B0589847-A498-4415-8700-252BDE1B20C0.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Sulawesi02/Pictures@master/img/106AD534-A38A-47F3-88A3-B7BE3F2FEEF1.jpg" alt="img"></p><p>找到SSH keys的设置选项，点击New SSH key 把id_rsa.pub里面的信息复制进去。</p><p>Title 可以随便起一个名字，Key 填写上一步复制的公钥内容，然后点击Add SSH key</p><p>最后执行下面的命令，测试一下 Git 参数是否配置成功。出现<code>Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>，说明配置成功。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>点New创建新的分支</p><p><img src="https://cdn.jsdelivr.net/gh/Sulawesi02/Pictures@master/img/774824-20190711140028506-1779404486.png" alt="img"></p><p>点Create respository创建完成</p><p><img src="https://cdn.jsdelivr.net/gh/Sulawesi02/Pictures@master/img/774824-20190711140627867-638127161.png" alt="img"></p><p>本地仓库右键→显示更多选项→Open Git Bash Here</p><p>初始化 Git</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>当前目录会出现一个.git文件</p><p><img src="https://cdn.jsdelivr.net/gh/Sulawesi02/Pictures@master/img/Pasted%20image%2020240630002716.png" alt="Pasted image 20240630002716"></p><p>配置用户名和电子邮件地址</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Sulawesi02&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;18293411692@163.com&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Sulawesi02/Pictures@master/img/774824-20190711145256123-1576130239.png" alt="img"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git add .<br>git commit -m <span class="hljs-string">&quot;commit&quot;</span><br>git remote add origin https://github.com/Sulawesi02/llm.git<br>git push -u origin <span class="hljs-keyword">master</span><br><br><br><span class="hljs-title"># 提交时如果仓库上已经存在 readme</span> 或其他文件，可能会存在冲突<br><br><span class="hljs-comment"># 强制推送（舍弃线上的文件）</span><br>git push -f origin <span class="hljs-keyword">master</span><br><br><span class="hljs-title"># 保留线上的 readme</span> 文件，需要先执行<br>git pull origin <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><blockquote><p>网上的git教程有的用main分支举例，有的用master分支举例，原因在于，github建立远程仓库时的默认分支是main，实际上是通过倒数1、3行实现的，代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;# Visualization&quot;</span> &gt;&gt; README.md</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">git init</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">git add README.md</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">git commit -m <span class="hljs-string">&quot;first commit&quot;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">git branch -M main <span class="hljs-comment">#创建新的分支main</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">git remote add origin https://github.com/Sulawesi02/Visualization.git</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">git push -u origin main <span class="hljs-comment">#将新分支main推送到github</span></span><br></code></pre></td></tr></table></figure><p>而建立本地仓库时的默认分支是master，所以两种分支其实区别不大，但我觉得提交master分支更顺手一点（提交main分支需要额外在本地创建并切换到main分支，别的区别不大）</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Hexo + GitHub 搭建个人博客</title>
    <link href="/2024/08/17/2024-08-17-%E4%BD%BF%E7%94%A8-Hexo-+-GitHub-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/08/17/2024-08-17-%E4%BD%BF%E7%94%A8-Hexo-+-GitHub-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>本文是作者对于Hexo搭建的阶段总结。汇总了一些搭建过程中找到的资料。希望能够较为全面的记录博客搭建的全过程。给自己备忘，为他人提供帮助。</p><h2 id="二、安装依赖环境"><a href="#二、安装依赖环境" class="headerlink" title="二、安装依赖环境"></a>二、安装依赖环境</h2><h4 id="1-Hexo简介"><a href="#1-Hexo简介" class="headerlink" title="1.Hexo简介"></a>1.Hexo简介</h4><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。</p><h4 id="2-前期安装"><a href="#2-前期安装" class="headerlink" title="2.前期安装"></a>2.前期安装</h4><h5 id="2-1安装Git"><a href="#2-1安装Git" class="headerlink" title="2.1安装Git"></a>2.1安装Git</h5><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理hexo博客文章，上传到GitHub的工具。因为 Hexo 是一个托管于 GitHub 上的开源项目，所以安装 Hexo 的时候需要使用 Git 来下载源码和依赖代码，而且后面要将自己的博客发布到 GitHub pages 上面也需要使用 Git。</p><p>windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。windows在git安装完后，就可以直接使用git bash来敲命令行了。</p><p>linux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install git<br></code></pre></td></tr></table></figure><h5 id="2-2安装nodejs"><a href="#2-2安装nodejs" class="headerlink" title="2.2安装nodejs"></a>2.2安装nodejs</h5><p>Hexo是基于Node.js开发的，所以需要安装一下Node.js环境。</p><p>windows：Node.js选择LTS版本就行了。</p><p>linux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install nodejs<br><span class="hljs-built_in">sudo</span> apt-get install npm<br></code></pre></td></tr></table></figure><h2 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h2><p>首先在本地新建一个空文件夹myBlog，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。我这里建立在 <code>D:\Mycode\projects\Hexo Blog\myBlog</code>。</p><p>然后cd到这个文件夹下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入到myBlog文件夹</span><br><span class="hljs-built_in">cd</span> myBlog<br><span class="hljs-comment"># 安装 hexo 框架</span><br>npm install -g hexo-cli<br><span class="hljs-comment"># 初始化hexo</span><br>hexo init<br><span class="hljs-comment"># 安装 hexo 依赖包</span><br>npm install<br></code></pre></td></tr></table></figure><p>安装 hexo 模块，<code>-g</code>表示安装全局模块。</p><p>hexo 初始化，会用 <code>git clone</code>命令去 GitHub 下载一个 hexo 默认模板代码库。</p><p>安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。</p><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><h4 id="打开hexo的服务"><a href="#打开hexo的服务" class="headerlink" title="打开hexo的服务"></a>打开hexo的服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除缓存文件，建议写完文章后执行一次</span><br>hexo clean <br><span class="hljs-comment"># 生成静态文件（生成 public 文件夹，写完文章执行）</span><br>hexo g                       g-&gt;generate<br><span class="hljs-comment"># 启动服务器</span><br>hexo s                       s-&gt;server<br><br><span class="hljs-comment"># 或者直接执行</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></table></figure><p>此时，在浏览器输入<code>http://localhost:4000/</code>，就可以看到 Hexo 搭建的默认主题博客示例了。</p><blockquote><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p>参考<a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">开始使用 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p>去主题官网，里面有上百种主题，这里选择 Fluid 主题，也是我个人在用的。</p><p>执行命令，将主题安装到myBlog根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 _config.fluid.yml，将 Fluid 主题的 _config.yml 内容复制进去。</p><p>后续修改博客的配置，例如标题，头像，评论等等只需要在 _config.fluid.yml文件中配置就行。</p><h5 id="1-指定主题"><a href="#1-指定主题" class="headerlink" title="1.指定主题"></a>1.指定主题</h5><p>修改myBlog博客目录中的 _config.yml：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme: fluid  <span class="hljs-comment"># 主题</span><br>language: zh-CN  <span class="hljs-comment"># 语言</span><br></code></pre></td></tr></table></figure><h5 id="2-创建关于页面"><a href="#2-创建关于页面" class="headerlink" title="2.创建关于页面"></a>2.创建关于页面</h5><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 &#x2F;source&#x2F;about&#x2F;index.md，添加 layout 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: about<br>layout: about<br>---<br><br>这是关于页面<br></code></pre></td></tr></table></figure><h5 id="打开hexo的服务-1"><a href="#打开hexo的服务-1" class="headerlink" title="打开hexo的服务"></a>打开hexo的服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除缓存文件，建议写完文章后执行一次</span><br>hexo clean <br><span class="hljs-comment"># 生成静态文件（生成 public 文件夹，写完文章执行）</span><br>hexo g                       g-&gt;generate<br><span class="hljs-comment"># 启动服务器</span><br>hexo s                       s-&gt;server<br><br><span class="hljs-comment"># 或者直接执行</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></table></figure><p>此时，在浏览器输入<code>http://localhost:4000/</code>，就可以看到 Hexo 搭建的 Fluid 主题博客示例了。</p></blockquote><h2 id="四、Github部署"><a href="#四、Github部署" class="headerlink" title="四、Github部署"></a>四、Github部署</h2><p>我们利用 Hexo 框架在本地搭建了一个精美的博客，可是只能本地访问，要想发布到互联网上，还需要将它部署在网站上。</p><p>博客的功能只要能阅读文章就够了，因此可以考虑将其部署在提供静态网页托管服务的网站上，这样就省去了购买服务器(云主机)、域名、 IP 这些步骤。</p><p>下面介绍怎样利用 GitHub 提供的免费静态网页托管服务 GitHub Pages 建站。</p><h4 id="1-GitHub-Pages-简介"><a href="#1-GitHub-Pages-简介" class="headerlink" title="1.GitHub Pages 简介"></a>1.GitHub Pages 简介</h4><p>GitHub 是世界上最流行的软件源代码托管服务平台。</p><p>一个项目的主页如果只有源码，对新接触的人很不友好，不知从何处下手。虽然已经有了 readme.md 文件，但毕竟不如一个直观的网页来的直接。于是 GitHub 就设计了 Pages 功能，允许用户设计一个图文并茂的网页作为项目首页。</p><h4 id="2-GitHub-Pages-准备"><a href="#2-GitHub-Pages-准备" class="headerlink" title="2.GitHub Pages 准备"></a>2.GitHub Pages 准备</h4><p>首先注册一个 GitHub 账号。</p><p>打开 GitHub 主页，点击左上角New。</p><p>由于每个 GitHub 账户只能建立一个 GitHub Pages 页面，所以 <code>Repository name</code> 必须填<code>username.github.io</code>，否则就会建立一个普通仓库，GitHub Pages 功能不会生效。比如我的用户名是<code>Sulawesi02</code>，Repository name 这里就填<code>Sulawesi02.github.io</code>。</p><p>注意勾选 <code>Public</code>。</p><p>网上有的教程建议勾选 <code>Add a README file</code>自动生成一个 <code>readme.md</code>文件，但这样做后续发布 Hexo 到 GitHub时会出问题，所以这里建议不要勾选。</p><p>点击<code>create repository</code>，创建仓库。</p><h4 id="3-将hexo部署到GitHub-Pages"><a href="#3-将hexo部署到GitHub-Pages" class="headerlink" title="3.将hexo部署到GitHub Pages"></a>3.将hexo部署到GitHub Pages</h4><h5 id="3-1配置-Git-参数"><a href="#3-1配置-Git-参数" class="headerlink" title="3.1配置 Git 参数"></a>3.1配置 Git 参数</h5><p>在博客根目录配置用户名和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Sulawesi02&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;18293411692@163.com&quot;</span><br></code></pre></td></tr></table></figure><p>使用以下命令生成 SSH Key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;18293411692@163.com&quot;</span><br></code></pre></td></tr></table></figure><p>接着一路回车，直到结束。 会显示已经生成了.ssh的文件夹。在你的电脑中找到文件夹C:\Users\ <code>useraccount </code>&#x2F;.ssh&#x2F;id_rsa.pub，用记事本打开，复制全部内容。</p><p>打开自己的 Github 主页，点击右上角的头像，点击Settings。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/03/48840BF0-992F-4CCC-A388-15CB74819D88.jpg" alt="img"></p><p>点击SSH and GPG keys，然后点击New SSH keys。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/03/B0589847-A498-4415-8700-252BDE1B20C0.jpg" alt="img"></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/03/106AD534-A38A-47F3-88A3-B7BE3F2FEEF1.jpg" alt="img"></p><p>找到SSH keys的设置选项，点击New SSH key 把id_rsa.pub里面的信息复制进去。</p><p>Title 可以随便起一个名字，Key 填写上一步复制的公钥内容，然后点击Add SSH key</p><p>最后执行下面的命令，测试一下 Git 参数是否配置成功。出现<code>Hi Sulawesi02! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>，说明配置成功。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><h5 id="3-2发布"><a href="#3-2发布" class="headerlink" title="3.2发布"></a>3.2发布</h5><p>打开站点配置文件 _config.yml，翻到最后，修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: git@github.com:Sulawesi02/Sulawesi02.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><p>安装deploy-git 插件，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除缓存文件，建议写完文章后执行一次</span><br>hexo clean <br><span class="hljs-comment"># 生成静态文件（生成 public 文件夹，写完文章执行）</span><br>hexo g                       g-&gt;generate<br><span class="hljs-comment"># 部署到远程站点</span><br>hexo d                       d-&gt;deploy<br><br><span class="hljs-comment"># 或者直接执行</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p> 执行成功可以通过&#96;&#96;https:&#x2F;&#x2F; Sulawesi02.github.io&#96; 来访问博客了。</p><h2 id="五、编写Markdown文章"><a href="#五、编写Markdown文章" class="headerlink" title="五、编写Markdown文章"></a>五、编写Markdown文章</h2><p><strong>Typora + PicGo + GitHub图床 + jsDelivr CDN加速</strong></p><p>使用 Typora 编写markdown文章, 拖入或者粘贴图片时，会自动调用 PicGo 将图片上传到 GitHub图床，并把返回的图片链接粘贴到文章中。GitHub 存储的图片地址是 <a href="https://raw.githubusercontent.com/">https://raw.githubusercontent.com</a> 开头的网址，这个域名在某些地方可能打不开或者很慢导致图片加载失败，所以需要对图片配置 CDN 加速。</p><h4 id="1-Typora"><a href="#1-Typora" class="headerlink" title="1.Typora"></a>1.Typora</h4><p>使用 Typora 编写markdown文章。</p><p>写文章时自己在开头添加好title，date，tags等字段。</p><blockquote><p>图床(Picture host，即提供外链访问的图片存储服务器)</p><p>通俗讲就是你把图片上传到一个图床提供者的图片服务器上，它会生成一个存储链接，你就可以随时通过这个链接就下载这个图片，而且还可以把这个链接放到 html 里或者 Markdown 文件里，浏览时再由浏览器或者阅读器自动加载出来。</p><p>对于我们的 Markdown 格式的博客而言，图片就成了一个文本，你可以把文章复制到 CSDN&#x2F;简书&#x2F;知乎&#x2F;个人博客等地方，每次换地方不需要重新上传图片，这些网站都能根据图床链接将图片加载出来。</p><p>我们可以利用 GitHub 的存储能力和对外开放访问的特点，将 GitHub 仓库作为图床。</p></blockquote><h4 id="2-GitHub图床"><a href="#2-GitHub图床" class="headerlink" title="2.GitHub图床"></a>2.GitHub图床</h4><h5 id="2-1新建仓库"><a href="#2-1新建仓库" class="headerlink" title="2.1新建仓库"></a>2.1新建仓库</h5><p>打开 GitHub 主页，点击左上角New。</p><p>新建一个仓库 Pictures 用于存储图片。</p><h5 id="2-2获取-repo-tokens"><a href="#2-2获取-repo-tokens" class="headerlink" title="2.2获取 repo tokens"></a>2.2获取 repo tokens</h5><p>这个 token 主要用于让 PicGo 有权限往我们的仓库 push 代码(图片)。</p><p>点击自己的头像，选择<code>Settings</code>。</p><p>选择<code>Developer settings</code>。</p><p>点击 <code>Personal access tokens</code>。然后点击<code>Generate new token</code>，因为是敏感操作，此时需要确认密码。</p><p><code>Note</code>填写 token 用途，用于备忘。下面只需要勾选<code>repo</code>，只给更新仓库的权限。最后点击最下面的Generate token创建成功。</p><p>复制字符串下一步使用。注意，为了安全起见此字符串只会出现一次，点击其他页面后就无法再查看了，需要重新创建，所以最好先保存到本地编辑器中。</p><h4 id="3-PicGo"><a href="#3-PicGo" class="headerlink" title="3.PicGo"></a>3.PicGo</h4><p>PicGo 是一款基于 electron-vue 开发的用于快速上传图片并获取图片 URL 链接的开源工具。</p><p>当写文章需要引用图片时，如果打开浏览器将图片上传到图床服务器，再把链接复制粘贴到文章中，效率太低。PicGo 便是做这件事的软件，只要配置好图床类型，就可以使用 PicGo 在插入图片时自动把图片上传并返回链接地址，配合 Typora 还可以实现在文章中插入图片时自动上传并替换为链接内容。</p><p>打开 <code>PicGo -&gt;图床设置 -&gt;GitHub图床</code></p><ul><li><p>设定仓库名：<code>用户名/仓库名</code></p></li><li><p>设定分支名：<code>master</code></p></li><li><p>设定Token：填写上一步获取的 token 值</p></li><li><p>指定存储路径：<code>img/</code></p></li><li><p>设定自定义域名：用于修改返回的 url 前缀，不填则返回原始 url。后面配置CDN加速需要更改此项，现在可不填</p><p>选择设为默认图床，点击确定保存配置。</p></li></ul><p>配置完成后，点击<code>上传区</code>，随便选择电脑上一张图片拖动到上传区，上传成功后会弹窗提示，将该 url 复制到浏览器打开就可以看到图片。可以在<code>PicGo设置</code>，打开<code>上传后自动复制URL</code>，这样上传成功后图片 url 会自动复制在剪贴板，可以直接粘贴到记事本。</p><h4 id="4-jsDelivr-CDN加速"><a href="#4-jsDelivr-CDN加速" class="headerlink" title="4.jsDelivr CDN加速"></a>4.jsDelivr CDN加速</h4><p>从上一步可以看到 GitHub 存储的图片地址是 <code>https://raw.githubusercontent.com</code> 开头的网址，这个域名在某些地方可能打不开或者很慢导致图片加载失败，所以我们需要对图片配置 CDN 加速。</p><p>CDN的全称是(Content Delivery Network)，即内容分发网络。其目的是通过在现有的Internet中增加一层新的CACHE(缓存)层，将网站的内容发布到最接近用户的网络”边缘“的节点，使用户可以就近取得所需的内容，提高用户访问网站的响应速度。通俗来讲，就是 CDN 服务商在全球各个地方建立服务器把要加速的站点进行缓存备份，当你访问站点时实际上是从离你最近的服务器访问缓存，速度自然就快了。</p><p>原始图片地址的格式为<a href="https://raw.githubusercontent.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D/%E5%88%86%E6%94%AF%E5%90%8D/%E7%9B%AE%E5%BD%95/%E5%9B%BE%E7%89%87%E5%90%8D.png%EF%BC%8Chttps://raw.githubusercontent.com/yushuaige/myblog/master/img/image-20201219114500183.png%EF%BC%8C">https://raw.githubusercontent.com/用户名/仓库名/分支名/目录/图片名.png，https://raw.githubusercontent.com/yushuaige/myblog/master/img/image-20201219114500183.png，</a></p><p>更改后的图片地址的格式<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D@%E5%88%86%E6%94%AF%E5%90%8D/%E7%9B%AE%E5%BD%95/%E5%9B%BE%E7%89%87%E5%90%8D.png%EF%BC%8C">https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名/目录/图片名.png，</a></p><p><a href="https://cdn.jsdelivr.net/gh/yushuaige/myblog@master/img/image-20201219114500183.png%E3%80%82">https://cdn.jsdelivr.net/gh/yushuaige/myblog@master/img/image-20201219114500183.png。</a></p><p><strong>PicGo 中需要改一下自定义域名</strong>，之后上传图片自动生成的链接就是 jsDelivr 的链接了。具体就是在<code>设定自定义域名</code>填写<code>https://cdn.jsdelivr.net/gh/用户名/仓库名@master</code>。</p><h4 id="Typora-配置"><a href="#Typora-配置" class="headerlink" title="Typora 配置"></a>Typora 配置</h4><p>打开<code>文件-&gt;偏好设置-&gt;图像</code>，选择插入图片时<code>上传图片</code>，勾选对本地位置的图片应用上述规则、对网络位置的图片应用上述规则、优先使用相对路径三个选项，上传服务设定选择<code>PicGo (app)</code>，PicGo 路径选择自己电脑上 PicGo 的安装路径。</p><p>美中不足的是虽然CDN加速解决了查看图片的速度，但是上传还是有点慢的，会出现在 Typora 中粘贴了一张图片后需要5秒以上才能上传成功并加载出来，还有就是本地没有分类备份(其实在<code>C:\Users\用户名\AppData\Roaming\Typora\typora-user-images</code>目录下有缓存)。</p><h2 id="六、发布-Hexo-到-GitHub"><a href="#六、发布-Hexo-到-GitHub" class="headerlink" title="六、发布 Hexo 到 GitHub"></a>六、发布 Hexo 到 GitHub</h2><h4 id="1-手动发布"><a href="#1-手动发布" class="headerlink" title="1.手动发布"></a>1.手动发布</h4><p>本地文章保存在E:\Markdown目录，Hexo 保存在<code>D:\Mycode\projects\Hexo Blog\myBlog\source\_posts</code>，发布 Hexo 之前需要先把本地文章拷贝到<code>D:\Mycode\projects\Hexo Blog\myBlog\source\_posts</code>目录。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> copy_to_hexo.<span class="hljs-keyword">py</span> <br></code></pre></td></tr></table></figure><p>可以查看<code>D:\Mycode\projects\Hexo Blog\myBlog\source\_posts</code>目录下是否生成新文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入到myBlog文件夹</span><br><span class="hljs-built_in">cd</span> myBlog<br><br><span class="hljs-comment"># 发布到本地</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br><br>访问 http://localhost:4000/<br><br><span class="hljs-comment"># 发布到远程</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br><br>访问 https://sulawesi02.github.io/<br></code></pre></td></tr></table></figure><h4 id="2-一键发布脚本"><a href="#2-一键发布脚本" class="headerlink" title="2.一键发布脚本"></a>2.一键发布脚本</h4><p>双击 <code>post_my_blog.bat</code>，或者在命令行执行 <code>post_my_blog.bat</code></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
